{"version":3,"sources":["ExampleCustomForm/ExampleCustomForm.tsx","NumberGuessForm/NumberGuessForm.tsx","ScoreboardForm/Scoreboard.tsx","DialogRenderer/CustomFormsRenderer.tsx","ExampleStartDialog/ExampleStartdialog.tsx","DialogRenderer/StartDialogRenderer.tsx","App.tsx","index.tsx"],"names":["ExampleCustomForm","props","state","className","onClick","this","_handleFormSubmit","bind","finishUserTask","React","Component","NumberGuessForm","value","type","placeholder","onChange","_handle_input_change","min","max","alert","guess","e","setState","target","ScoreboardForm","scores","userTask","tokens","at","payload","greater_less_scores","filter","score","mode","warmer_colder_scores","arithmetic_mean","length","sum","forEach","element","full_arithmetic_mean","greater_less_mean","warmer_colder_mean","map","id","CustomFormsRenderer","targetComponent","suspendState","components","customFormService","updateComponent","_identity","preferredControl","userTaskConfig","customForm","Error","JSON","stringify","component","suspendUserTask","abortUserTask","terminateProcessInstance","result","CustomFormService","onUserTaskReceived","destroy","createElement","ExampleStartDialog","input","_handleOnClick","startProcess","name","StartDialogRenderer","startDialogService","displayStartDialog","config","identity","targetIdentity","targetStartDialogConfiguration","currentLanguage","StartDialogService","onStartDialogDisplayed","language","closeStartDialog","openStartDialog","startDialogId","startDialogConfiguration","processModelId","startEventId","withTranslation","App","style","height","displayName","container","document","getElementById","createRoot","render"],"mappings":"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","file":"static/js/main.42906b2b.chunk.js","sourcesContent":["import React from 'react';\n\nimport { CustomFormProps } from '../DialogRenderer';\n\nimport './ExampleCustomForm.css';\n\nexport class ExampleCustomForm extends React.Component<CustomFormProps> {\n\n  constructor(props: any) {\n    super(props);\n\n    this.state = {};\n  }\n\n  public render(): JSX.Element {\n    return (\n      <div className='test-class'>\n        <p>This is a custom-form.</p>\n        <button onClick={this._handleFormSubmit.bind(this)}>\n          Confirm\n        </button>\n      </div>\n    );\n  }\n\n  private _handleFormSubmit(): void {\n    this.props.finishUserTask({});\n  }\n\n}\n","import React from 'react';\n\nimport { CustomFormProps } from '../DialogRenderer';\n\nimport './NumberGuessForm.css';\n\n\nexport class NumberGuessForm extends React.Component<CustomFormProps, { value: number }> {\n  constructor(props: any) {\n    super(props);\n\n    this.state = { value: -1 };\n  }\n  \n  public render(): JSX.Element {\n    return (\n      <div className='test-class'>\n        <h2>Rate eine Zahl zwischen 1 und 100.</h2>\n        <input type='number' placeholder='1-100' onChange={this._handle_input_change.bind(this)} min='1' max='100' />\n        <button onClick={this._handleFormSubmit.bind(this)}>\n          Confirm\n        </button>\n      </div>\n    );\n  }\n\n  private _handleFormSubmit(): void {\n    if (this.state.value < 1 || this.state.value > 100) {\n      alert('Du must eine Zahl zwischen 1 und 100 raten!');\n      return;\n    }\n    this.props.finishUserTask({\n      guess: this.state.value,\n    });\n\n  }\n\n  private _handle_input_change(e: any): void {\n    this.setState({ value: e.target.value });\n  }\n}\n","import React, { Key } from 'react';\n\nimport { CustomFormProps } from '../DialogRenderer';\n\nimport './Scoreboard.css';\n\n\nexport class ScoreboardForm extends React.Component<CustomFormProps, { value: number }> {\n  constructor(props: any) {\n    super(props);\n\n    this.state = { value: -1 };\n  }\n\n\n\n  public render(): JSX.Element {\n    const scores = this.props.userTask?.tokens.at(-1)?.payload.scores;\n\n    const greater_less_scores = scores.filter((score: { mode: string; }) => score.mode === 'g');\n    const warmer_colder_scores = scores.filter((score: { mode: string; }) => score.mode === 'w');\n\n    const arithmetic_mean = (scores: { score: number; }[]): number | string => {\n      if (scores.length === 0) return 'No Games Played';\n      let sum = 0;\n      scores.forEach((element: { score: number; }) => {\n        sum += element.score;\n      });\n      return sum / scores.length;\n    };\n\n    const full_arithmetic_mean = arithmetic_mean(scores);\n    const greater_less_mean = arithmetic_mean(greater_less_scores);\n    const warmer_colder_mean = arithmetic_mean(warmer_colder_scores);\n\n\n    return (\n      <div className='wrapper'>\n        <h2>Scoreboard</h2>\n        <hr />\n        <h4>Gespielte Spiele: {scores.length}</h4>\n        <table>\n          <thead>\n            <tr>\n              <th>Modus</th>\n              <th>Versuche</th>\n            </tr>\n          </thead>\n          <tbody>\n            {scores.map(\n              (score: {\n                [x: string]: Key; mode: string; score: number\n              }) => {\n                let mode = 'ERROR: Mode String is invalid!';\n                if (score.mode === 'g') mode = 'Größer/Kleiner';\n                else if (score.mode === 'w') mode = 'Wärmer/Kälter';\n                return (\n                  <tr key={score.id}>\n                    <td>{mode}</td>\n                    <td>{score.score}</td>\n                  </tr>\n                );\n              },\n            )}\n          </tbody>\n        </table>\n        <hr />\n        <h4>Durchschnitte</h4>\n        <table>\n          <thead>\n            <tr>\n              <th>\n                Modus\n              </th>\n              <th>\n                Durchschnitt\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr><td>Alle Spiele</td> <td>{full_arithmetic_mean}</td></tr>\n            <tr><td>Größer/Kleiner</td> <td>{greater_less_mean}</td></tr>\n            <tr><td>Wärmer/Kälter</td> <td>{warmer_colder_mean}</td></tr>\n          </tbody>\n        </table>\n        <hr />\n        <button onClick={this._handleFormSubmit.bind(this)}>\n          Spiel beenden\n        </button>\n      </div>\n    );\n  }\n\n  private _handleFormSubmit(): void {\n    this.props.finishUserTask({});\n\n  }\n\n  private _handle_input_change(e: any): void {\n    this.setState({ value: e.target.value });\n  }\n}\n","import React from 'react';\n\nimport { DataModels, Identity } from '@atlas-engine/atlas_engine_client';\nimport { CustomFormService, FormState } from '@atlas-engine-contrib/atlas-ui_sdk';\n\nimport { Config } from '../config';\nimport { ExampleCustomForm } from '../ExampleCustomForm';\nimport { NumberGuessForm } from '../NumberGuessForm';\nimport { ScoreboardForm } from '../ScoreboardForm';\n\n\nexport type CustomFormProps = {\n  userTask: DataModels.FlowNodeInstances.UserTaskInstance;\n  suspendState: FormState;\n  abortUserTask: () => void;\n  finishUserTask: (result: DataModels.FlowNodeInstances.UserTaskResult) => void;\n  suspendUserTask: (state: FormState) => void;\n  config: Config,\n}\n\nexport type CustomFormRendererProps = {\n  components?: CustomFormsComponentDict;\n  config?: Config;\n}\n\nexport type CustomFormsServiceState = {\n  targetComponent: React.ComponentClass<CustomFormProps> | React.FunctionComponent<CustomFormProps> | null;\n  userTask: DataModels.FlowNodeInstances.UserTaskInstance | null;\n  suspendState: FormState | null;\n}\n\nexport type CustomFormsComponentDict = {\n  [preferredControl: string]: React.ComponentClass<CustomFormProps> | React.FunctionComponent<CustomFormProps>;\n}\n\nexport class CustomFormsRenderer extends React.Component<CustomFormRendererProps, CustomFormsServiceState> {\n\n  public state: CustomFormsServiceState = {\n    targetComponent: null,\n    userTask: null,\n    suspendState: null,\n  };\n\n  private components: CustomFormsComponentDict = {\n    ExampleCustomForm: ExampleCustomForm,\n    NumberGuessForm: NumberGuessForm,\n    ScoreboardForm: ScoreboardForm,\n  };\n\n  private customFormService: CustomFormService | null = null;\n\n  public componentDidMount(): void {\n    this.customFormService = new CustomFormService();\n    this.customFormService.onUserTaskReceived(this.updateComponent);\n\n    this.components = {\n      ...this.components,\n      ...this.props.components,\n    };\n  }\n\n  public updateComponent = (\n    userTask: DataModels.FlowNodeInstances.UserTaskInstance,\n    _identity: Identity,\n    suspendState: FormState | null,\n  ): void => {\n\n    const preferredControl = userTask.userTaskConfig.customForm;\n    if (!preferredControl) {\n      throw new Error(`No preferredControl set in usertask: ${JSON.stringify(userTask)}`);\n    }\n\n    const component = this.components[preferredControl];\n    if (!component) {\n      throw new Error(`No component found for usertask ${JSON.stringify(userTask)}`);\n    }\n\n    this.setState({\n      targetComponent: component,\n      userTask: userTask,\n      suspendState: suspendState,\n    });\n  };\n\n  public componentWillUnmount(): void {\n    if (!this.customFormService) {\n      return;\n    }\n    this.customFormService.destroy();\n  }\n\n  public suspendUserTask = (state: FormState): void => {\n    this.customFormService?.suspendUserTask(state);\n  };\n\n  public abortUserTask = (): void => {\n    this.customFormService?.terminateProcessInstance();\n  };\n\n  public finishUserTask = (result: DataModels.FlowNodeInstances.UserTaskResult): void => {\n    this.customFormService?.finishUserTask(result);\n  };\n\n  public render(): JSX.Element | null {\n    if (!this.state.targetComponent) {\n      return null;\n    }\n\n    const componentInstance = React.createElement(this.state.targetComponent, {\n      userTask: this.state.userTask,\n      suspendState: this.state.suspendState,\n      suspendUserTask: this.suspendUserTask,\n      abortUserTask: this.abortUserTask,\n      finishUserTask: this.finishUserTask,\n    } as CustomFormProps);\n\n    return componentInstance;\n  }\n\n}\n","import React from 'react';\n\nimport { StartDialogProps, StartDialogRendererState } from '../DialogRenderer';\n\nexport class ExampleStartDialog extends React.Component<StartDialogProps, StartDialogRendererState> {\n  input = '';\n\n  public render(): JSX.Element {\n    return (\n      <div>\n        <h2>Zahlenraten</h2>\n        <h3>Wie heißt du?</h3>\n        <input type='text' placeholder='Name' onChange={this._handle_input_change.bind(this)} />\n        <button onClick={() => this._handleOnClick()}>Spiel Starten</button>\n      </div>\n    );\n  }\n\n  private _handleOnClick(): void {\n    this.props.startProcess('Zahlenraten', {\n      name: this.input,\n    });\n  }\n\n  private _handle_input_change(e: any): void {\n    this.input = e.target.value;\n  }\n}\n","import React from 'react';\nimport { withTranslation, WithTranslation } from 'react-i18next';\n\nimport { IIdentity } from '@atlas-engine/atlas_engine_client';\nimport { StartDialogDisplayedCallback, StartDialogService } from '@atlas-engine-contrib/atlas-ui_sdk';\n\nimport { Config } from '../config';\nimport { ExampleStartDialog } from '../ExampleStartDialog';\n\n\nexport type DialogComponentDict = {\n  [id: string]: string;\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type StartDialogProps = {\n  language: string,\n  identity: IIdentity;\n  startDialogConfiguration: StartDialogConfiguration;\n  closeStartDialog: () => void;\n  openStartDialog: (startDialogId: string) => void;\n  startProcess: (processModelId: string, payload?: unknown, startEventId?: string) => void;\n  config: Config | undefined;\n};\n\nexport type StartDialogRendererProps = {\n  components?: StartDialogComponentDict;\n  stammdatenDialogs?: DialogComponentDict;\n  config?: Config;\n}\n\nexport type StartDialogComponentDict = {\n  [startDialogId: string]: React.ComponentClass<StartDialogProps> | React.FunctionComponent<StartDialogProps>;\n}\n\nexport type StartDialogRendererState = {\n  targetComponent: React.ComponentClass<StartDialogProps> | React.FunctionComponent<StartDialogProps> | null;\n  targetStartDialogConfiguration: StartDialogConfiguration | null;\n  targetIdentity: IIdentity | null;\n  currentLanguage: string;\n}\n\nexport type StartDialogConfiguration = {\n  id: string;\n  title: string;\n  body: string;\n  url: string;\n  startButtonTitle: string;\n}\n\nclass StartDialogRenderer extends React.Component<StartDialogRendererProps & WithTranslation, StartDialogRendererState> {\n\n  private startDialogService: StartDialogService | null = null;\n\n  constructor(props: StartDialogRendererProps & WithTranslation) {\n    super(props);\n\n    this.state = {\n      targetComponent: null,\n      targetIdentity: null,\n      targetStartDialogConfiguration: null,\n      currentLanguage: 'de',\n    };\n  }\n\n  private components: StartDialogComponentDict = {\n    ExampleStartDialog: ExampleStartDialog,\n  };\n\n  public componentDidMount(): void {\n    this.startDialogService = new StartDialogService();\n    this.startDialogService.onStartDialogDisplayed(this.displayStartDialog as StartDialogDisplayedCallback);\n\n    this.components = {\n      ...this.components,\n      ...this.props.components,\n    };\n  }\n\n  public componentWillUnmount(): void {\n    if (!this.startDialogService) {\n      return;\n    }\n    this.startDialogService.destroy();\n  }\n\n  private displayStartDialog = (config: StartDialogConfiguration, identity: IIdentity): void => {\n    const component = this.components[config.id];\n    if (!component) {\n      throw new Error(`No component found for usertask ${JSON.stringify(config)}`);\n    }\n\n    this.setState({\n      targetComponent: component,\n      targetIdentity: identity,\n      targetStartDialogConfiguration: config,\n    });\n  };\n\n  public render(): JSX.Element | null {\n    if (!this.state.targetComponent || !this.state.targetStartDialogConfiguration || !this.state.targetIdentity) {\n      return null;\n    }\n\n    const props: StartDialogProps = {\n      language: 'de',\n      closeStartDialog: (): void => this.startDialogService?.closeStartDialog(),\n      openStartDialog: (startDialogId: string): void => this.startDialogService?.openStartDialog(startDialogId),\n      identity: this.state.targetIdentity,\n      startDialogConfiguration: this.state.targetStartDialogConfiguration,\n      startProcess: (processModelId, payload?, startEventId?): void => {\n        this.startDialogService?.startProcess(processModelId, payload, startEventId);\n      },\n      config: this.props.config,\n    };\n\n    const componentInstance = React.createElement(this.state.targetComponent, props);\n\n    return componentInstance;\n  }\n\n}\n\nexport default withTranslation()(StartDialogRenderer);\n","import { Component } from 'react';\r\n\r\nimport { CustomFormsRenderer, StartDialogRenderer } from './DialogRenderer';\r\nimport { default as config } from './config/config.json';\r\n\r\nimport './custom.css';\r\n\r\nexport default class App extends Component {\r\n  static displayName = App.name;\r\n\r\n  render(): JSX.Element {\r\n    return (\r\n      <div style={{ height: '100%' }}>\r\n        <CustomFormsRenderer config={config} />\r\n        <StartDialogRenderer config={config} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import 'bootstrap/dist/css/bootstrap.css';\r\nimport { createRoot } from 'react-dom/client';\r\n\r\nimport App from './App';\r\n\r\n\r\nconst container = document.getElementById('root');\r\nconst root = createRoot(container!);\r\n\r\nroot.render(<App />);\r\n"],"sourceRoot":""}